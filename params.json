{"name":"Wunderground Ruby","body":"# Wunderground Ruby API wrapper\r\n\r\nWunderground Ruby is an API wrapper for interacting with the [Wunderground API](http://www.wunderground.com/weather/api/)\r\n\r\n\r\n##Installation\r\n\r\n    $ gem install wunderground_ruby\r\n\r\nor in your Gemfile\r\n\r\n\tgem 'wunderground_ruby'\r\n\r\n##Requirements\r\n\r\nA Wunderground account and API key.\r\nIf a request is attempted without an APIkey, this wrapper will raise a MissingAPIKey exception\r\n\r\nJSON only at the moment.\r\n\r\n##Usage\r\n\r\nYou can create an instance of the API wrapper and pass it the API key:\r\n\r\n    w_api = Wunderground.new(\"your apikey\")\r\n\r\nYou can also set the environment variable \"WUNDERGROUND_API_KEY\" and wunderground_ruby will use it when you create an instance:\r\n\r\n    w_api = Wunderground.new\r\n\r\nThis gem/wrapper uses some method_missing fun to make it easier to get feature and location data from Wunderground\r\n\r\nAny number of [features](http://www.wunderground.com/weather/api/d/documentation.html#request) work by passing the features from the method straight into the request URL.\r\n\r\nCheck out below and test file for more examples.\r\n\r\nStandard request breakdown:\r\n\r\n\twrapper_instance.get_[feature]_and_[another feature]_for(\"location string\",optional: \"hash\", values: \"at the end\")\r\n\t\r\n##Optional Hash\r\n\r\nThis ugly little guy handles the nonconformists in Wunderground's API request structure and the pervasive request timeout option.\r\nLuckily there are only three of these baddies, and only if you need them. (details below)\r\n\r\n\toptional_hash = {lang: \"FR\", geo_ip:\"127.0.0.1\", timeout: 20}\r\n\t\r\nNote: If needing to use these options, please place them as the last parameter(s) to the method call.\r\n\t\r\nCan you think of a better way to handle these? Pull requests welcome.\r\n\r\n##Features\r\n\r\nThe method_missing magic happens here.\r\n\r\n\tw_api.get_forecast_for(\"WA\",\"Spokane\")\r\n\tw_api.get_forecast_and_conditions_for(\"1234.1234,-1234.1234\") #a lat/long string\r\n\tw_api.get_webcams_and_conditions_and_alerts_for(\"33043\") #a zipcode\r\n\r\n##Locations\r\n\r\nAny location string that Wunderground accepts will pass straight through this wrapper to their API, _except for a specific geo-ip._ (examples below)\r\n\r\n\t#there is some handy array joining, if needed\r\n\tw_api.get_forecast_for(\"WA/Spokane\") #equivalent to the next example\r\n\tw_api.get_forecast_for(\"WA\",\"Spokane\") #equivalent to the previous example\r\n\t\r\n\t#zipcodes,lat/long, aiport codes, all of them just pass straight through this wrapper and into the request URL\r\n\tw_api.get_conditions_for(\"77898\")\r\n\t\r\n\t#weather station code uniqueness - they use the 'pws:' prefix for weather station codes. So does this wrapper.\r\n\tw_api.get_conditions_for(\"pws:STATIONCODE\")\r\n\t\r\n\tw_api.get_conditions_for(\"autoip\") #passes straight through, but only gets the weather for your server's IP, so not very useful probably\r\n\t\r\nFor geocoding a specific ip address as the location, just provide an IP like this:\r\n\t\r\n\tw_api.get_alerts_for(geo_ip: \"127.0.0.1\")\r\n\t\r\nThis was the quickest workaround to the non-conformity of the auto_ip request format.\r\n\t\r\n\t\r\n##Language Support\r\n\r\nBecause the Language modifier in Wunderground's request structure uses a colon, which doesn't jive with the method_missing design, adding a specific language to one request can be done like this:\r\n\r\n\tw_api.get_forecast_for(\"France\",\"Paris\", lang 'FR')\r\n\r\nAlso, you can set the default language in the constructor or with a setter.\r\n\r\n\tw_api = Wunderground.new(\"apikey\",language: \"FR\")\r\n\tw_api.language = 'FR'\r\n\tw_api.get_forecast_for(\"France\",\"Paris\") #automatically includes /lang:FR/ in the request url, so results will be in French\r\n\tw_api.get_forecast_for(\"France\",\"Paris\",lang: 'DE') #this will override the French(FR) default with German(DE)\r\n\t\r\n##History and Planner Helpers\r\n\r\nWhile it is possible to call\r\n\r\n\tw_api.get_history20101231_for(\"77789\")\r\n\tw_api.get_planner03150323_for(\"FL\",\"Destin\")\r\n\r\nto get the history/planner data for this date/location. You may enjoy more flexibility when using get_history_for and get_planner_for:\r\n\r\n\tw_api.get_history_for(\"20101010\",\"AL\",\"Birmingham\")\r\n\tw_api.get_history_for(1.year.ago,\"33909\")\r\n\tw_api.get_history_for(Date.now, \"France/Paris\",lang: \"FR\")\r\n\tw_api.get_history_for(Date.now, geo_ip:\"123.4.5.6\", lang: \"FR\")\r\n\tw_api.get_planner_for(\"03150323\",\"AL\",\"Gulf Shores\")\r\n\tw_api.get_planner_for(Time.now,Time.now+7.days, geo_ip: \"10.0.0.1\")\r\n\tw_api.get_planner_for(Time.now,Time.now+7.days,\"33030\")\r\n\r\n.get_history_for and .get_planner_for accepts a preformatted string or any Date/Time/DateTime-like object that responds to .strftime to auto-format the date.\r\n\r\n\r\n### Request Timeout\r\n\r\nwunderground_ruby defaults to a 30 second timeout. You can optionally set your own timeout (in seconds) in three ways like so:\r\n\r\n\tw_api = Wunderground.new(\"apikey\",timeout: 60)\r\n    w_api.timeout = 5\r\n\tw_api.get_history_for(1.year.ago, geo_ip: '127.0.0.1', timeout:60)\r\n\r\n\r\n### Error Handling\r\n\r\nBy default you are expected to handle errors returned by the APIs manually. (see their documentation for more information about these errors)\r\n\r\nIf you set the `throws_exceptions` boolean attribute for a given instance then\r\nwunderground_ruby will attempt to intercept the errors and raise an APIError exception if you feel like catching it.\r\n\r\n##Contributing\r\n\r\nDo eet.\r\n\r\n##Thanks\r\n\r\n* [Amro Mousa](https://github.com/amro) - design inspiration\r\n\r\n\r\n##Copyrights\r\n\r\n* Copyright (c) 2012 Winfred Nadeau. See LICENSE.txt for details.\r\n\r\nWinfred Nadeau is not affiliated with [Wunderground.com](http://wunderground.com), so check them out for licensing/copyright/legal/TOS details regarding their API and their data.\r\n","tagline":"A simple ruby wrapper for the Wunderground.com API","google":"UA-30606352-1","note":"Don't delete this file! It's used internally to help with page regeneration."}